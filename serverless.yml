# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bieber-bot

provider:
    name: aws
    runtime: python3.6
    iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: 'arn:aws:sns:us-east-1:465039758259:Test'
    - Effect: Allow
      Action:
        - ssm:GetParameters
        - ssm:GetParameter
      Resource:
        - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_TEAM_ID'
        - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_SLACK_BOT_TOKEN'
        - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_SLACK_VERIFICATION_TOKEN'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource:
        - { 'Fn::GetAtt': ['DynamoDBUsersTable', 'Arn' ] }
        - { 'Fn::GetAtt': ['DynamoDBBieberedTable', 'Arn' ] }
        - { 'Fn::GetAtt': ['DynamoDBBieberedByTable', 'Arn' ] }
    environment:
        users_table_name: ${self:custom.usersTableName}
        biebered_table_name: ${self:custom.usersBieberedTableName}
        biebered_by_table_name: ${self:custom.usersBieberedByTableName}
        biebered_sns: ${self:custom.snsBiebered}
        stats_sns: ${self:custom.snsStats}


functions:
    initial_response:
        handler: wsgi.handler
        events:
            - http: POST /bieber
    response_followup:
        handler: bieber_followup.lambda_func
        events:
            - sns: 'arn:aws:sns:us-east-1:465039758259:Test'
    update_dynamo:
        handler: update_db.lambda_func
        events:
            - sns: 'arn:aws:sns:us-east-1:465039758259:Test'
    tally_db:
        handler: tally_db.lambda_func
        events:
            - stream:
                type: dynamodb
                arn:
                    Fn::GetAtt:
                        - DynamoDBUsersTable
                        - StreamArn


plugins:
  - serverless-python-requirements
  - serverless-wsgi
custom:
    usersTableName: 'UsersTable-${self:provider.stage}'
    usersBieberedTableName: 'BieberedUsersTable-${self:provider.stage}'
    usersBieberedByTableName: 'BieberedByUsersTable-${self:provider.stage}'
    snsBiebered: 'BieberedQueue-${self:provider.stage}'
    snsStats: 'BieberedStats-${self:provider.stage}'
    wsgi:
        app: bieber.app
        packRequirements: false
    pythonRequirements:
        dockerizePip: non-linux


resources:
    Resources:
        DynamoDBUsersTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: user_id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: user_id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:custom.usersTableName}
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
        DynamoDBBieberedTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: user_id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: user_id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:custom.usersBieberedTableName}
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
        DynamoDBBieberedByTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: user_id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: user_id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:custom.usersBieberedByTableName}
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
        SnsBiebered:
            Type: AWS::SNS::Topic
            Properties:
                DisplayName: ${self:custom.snsBiebered}
        SnsStats:
            Type: AWS::SNS::Topic
            Properties:
                DisplayName: ${self:custom.snsStats}
