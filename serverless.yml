# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bieber-bot

provider:
    name: aws
    runtime: python3.6
    iamRoleStatements:
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - ${self:custom.snsBieberedArn}
            - ${self:custom.snsStatsArn}
        - Effect: Allow
          Action:
            - ssm:GetParameters
            - ssm:GetParameter
          Resource:
            - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_TEAM_ID'
            - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_SLACK_BOT_TOKEN'
            - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_SLACK_VERIFICATION_TOKEN'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource:
            - ${self:custom.dbUsersArn}
            - ${self:custom.dbBieberedArn}
            - ${self:custom.dbBieberedByArn}

    environment:
        users_table_name: ${self:custom.usersTableName}
        biebered_table_name: ${self:custom.usersBieberedTableName}
        biebered_by_table_name: ${self:custom.usersBieberedByTableName}
        biebered_sns_arn: ${self:custom.snsBieberedArn}
        stats_sns_arn: ${self:custom.snsStatsArn}


functions:
    initial_response:
        handler: wsgi.handler
        events:
            - http: POST /bieber
    response_followup:
        handler: bieber_followup.lambda_func
        events:
            - sns: arn:aws:sns:${self:provider.region}:465039758259:${self:custom.snsBieberedName}
                # topicName: ${self:custom.snsBieberedName}
                # displayName: Biebered Users SNS
    update_dynamo:
        handler: update_db.lambda_func
        events:
            - sns: arn:aws:sns:${self:provider.region}:465039758259:${self:custom.snsBieberedName}
                # topicName: ${self:custom.snsBieberedName}
                # displayName: Biebered Users SNS
    get_stats:
        handler: bieber_stats.lambda_func
        events:
            - sns: arn:aws:sns:${self:provider.region}:465039758259:${self:custom.snsStatsName}
                # topicName: ${self:custom.snsStatsName}
                # displayName: Biebered Stats SNS
    tally_db:
        handler: tally_db.lambda_func
        events:
            - stream:
                type: dynamodb
                arn:
                    Fn::GetAtt:
                        - DynamoDBUsersTable
                        - StreamArn


plugins:
  - serverless-python-requirements
  - serverless-wsgi

custom:
    usersTableName: 'UsersTable-${self:provider.stage}'
    usersBieberedTableName: 'BieberedUsersTable-${self:provider.stage}'
    usersBieberedByTableName: 'BieberedByUsersTable-${self:provider.stage}'
    snsBieberedName: 'Biebered-${self:provider.stage}'
    snsStatsName: 'Stats-${self:provider.stage}'

    snsBieberedArn:
        Fn::Join:
              - ''
              - - 'arn:aws:sns:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":"
                - Fn::GetAtt:
                  - SNSUsersQueue
                  - TopicName
    snsStatsArn:
        Fn::Join:
              - ''
              - - 'arn:aws:sns:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":"
                - Fn::GetAtt:
                  - SNSStatsQueue
                  - TopicName

    dbUsersArn: { 'Fn::GetAtt': ['DynamoDBUsersTable', 'Arn' ] }
    #dbUsersStreamArn: { 'Fn::GetAtt': ['DynamoDBUsersTable', 'StreamArn' ] }
    dbBieberedArn: { 'Fn::GetAtt': ['DynamoDBBieberedTable', 'Arn' ] }
    dbBieberedByArn: { 'Fn::GetAtt': ['DynamoDBBieberedByTable', 'Arn' ] }

    wsgi:
        app: bieber.app
        packRequirements: false
    pythonRequirements:
        dockerizePip: non-linux


resources:
    Resources:
        DynamoDBUsersTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: user_id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: user_id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:custom.usersTableName}
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
        DynamoDBBieberedTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: user_id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: user_id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:custom.usersBieberedTableName}
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
        DynamoDBBieberedByTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: user_id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: user_id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 1
                    WriteCapacityUnits: 1
                TableName: ${self:custom.usersBieberedByTableName}
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
        SNSUsersQueue:
            Type: AWS::SNS::Topic
            Properties:
                DisplayName: "SNS Topic to receive and send initial SNS messages"
                TopicName: ${self:custom.snsBieberedName}
        SNSStatsQueue:
            Type: AWS::SNS::Topic
            Properties:
                DisplayName: "SNS Topic to receive and send status SNS messages"
                TopicName: ${self:custom.snsStatsName}

package:
    exclude:
        - node_modules/
