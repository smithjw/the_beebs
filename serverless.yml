# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bieber-bot

provider:
    name: aws
    runtime: python3.6
    iamRoleStatements:
        - Effect: Allow
          Action:
            - ssm:GetParameters
            - ssm:GetParameter
          Resource:
            - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_TEAM_ID'
            - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_SLACK_BOT_TOKEN'
            - 'arn:aws:ssm:us-east-1:465039758259:parameter/PA_SLACK_VERIFICATION_TOKEN'

    environment:
        users_table_name: ${self:custom.usersTableName}
        users_tally_table_name: ${self:custom.usersTallyTableName}
        biebered_sns_arn: ${self:custom.snsBieberedArn}
        stats_sns_arn: ${self:custom.snsStatsArn}
        region: 'us-east-1'


functions:
    initial_response:
        handler: wsgi.handler
        events:
            - http: ANY /
            - http: 'ANY {proxy+}'
        iamRoleStatementsName: initial_response_role
        iamRoleStatementsInherit: true
        iamRoleStatements:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource:
                - ${self:custom.snsBieberedArn}
                - ${self:custom.snsStatsArn}
    response_followup:
        handler: bieber_followup.lambda_func
        events:
            - sns: arn:aws:sns:${self:provider.region}:465039758259:${self:custom.snsBieberedName}
    get_stats:
        handler: bieber_stats.lambda_func
        events:
            - sns: arn:aws:sns:${self:provider.region}:465039758259:${self:custom.snsStatsName}
        iamRoleStatementsName: get_stats_role
        iamRoleStatementsInherit: true
        iamRoleStatements:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource:
                - ${self:custom.dbUsersTallyArn}
    update_db:
        handler: update_db.lambda_func
        events:
            - sns: arn:aws:sns:${self:provider.region}:465039758259:${self:custom.snsBieberedName}
        iamRoleStatementsName: update_db_role
        iamRoleStatementsInherit: true
        iamRoleStatements:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource:
                - ${self:custom.dbUsersArn}
                - ${self:custom.dbUsersTallyArn}
    tally_db:
        handler: tally_db.lambda_func
        events:
            - stream:
                type: dynamodb
                arn:
                    Fn::GetAtt:
                        - DynamoDBUsersTable
                        - StreamArn
        iamRoleStatementsName: tally_db_role
        iamRoleStatementsInherit: true
        iamRoleStatements:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource:
                - ${self:custom.dbUsersTallyArn}
                - ${self:custom.dbUsersArn}


plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-iam-roles-per-function
  - serverless-plugin-dynamodb-autoscaling


custom:
    usersTableName: 'UsersTable-${self:provider.stage}'
    usersTallyTableName: 'UsersTallyTable-${self:provider.stage}'
    snsBieberedName: 'Biebered-${self:provider.stage}'
    snsStatsName: 'Stats-${self:provider.stage}'

    snsBieberedArn:
        Fn::Join:
              - ''
              - - 'arn:aws:sns:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":"
                - Fn::GetAtt:
                  - SNSUsersQueue
                  - TopicName
    snsStatsArn:
        Fn::Join:
              - ''
              - - 'arn:aws:sns:'
                - Ref: AWS::Region
                - ":"
                - Ref: AWS::AccountId
                - ":"
                - Fn::GetAtt:
                  - SNSStatsQueue
                  - TopicName

    dbUsersArn: { 'Fn::GetAtt': ['DynamoDBUsersTable', 'Arn' ] }
    dbUsersTallyArn: { 'Fn::GetAtt': ['DynamoDBUsersTallyTable', 'Arn' ] }

    wsgi:
        app: bieber.app
        packRequirements: false
    pythonRequirements:
        dockerizePip: non-linux
    serverless-iam-roles-per-function:
        defaultInherit: true


resources:
    Resources:
        DynamoDBUsersTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: user_id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: user_id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 10
                    WriteCapacityUnits: 10
                TableName: ${self:custom.usersTableName}
                StreamSpecification:
                    StreamViewType: NEW_IMAGE
        DynamoDBUsersTallyTable:
            Type: 'AWS::DynamoDB::Table'
            Properties:
                AttributeDefinitions:
                    -
                        AttributeName: user_id
                        AttributeType: S
                KeySchema:
                    -
                        AttributeName: user_id
                        KeyType: HASH
                ProvisionedThroughput:
                    ReadCapacityUnits: 10
                    WriteCapacityUnits: 10
                TableName: ${self:custom.usersTallyTableName}
        SNSUsersQueue:
            Type: AWS::SNS::Topic
            Properties:
                DisplayName: "SNS Topic to receive and send initial SNS messages"
                TopicName: ${self:custom.snsBieberedName}
        SNSStatsQueue:
            Type: AWS::SNS::Topic
            Properties:
                DisplayName: "SNS Topic to receive and send status SNS messages"
                TopicName: ${self:custom.snsStatsName}


package:
    exclude:
        - node_modules/**
