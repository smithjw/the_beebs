# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bieber-bot

provider:
    name: aws
    runtime: python3.6
    iamRoleStatements:
        - Effect: Allow
          Action:
            - ssm:GetParameters
            - ssm:GetParameter
          Resource:
            - 'arn:aws:ssm:${self:custom.region}:#{AWS::AccountId}:parameter/bieber_*'
        - Effect: Allow
          Action:
            - kms:Decrypt
          Resource:
            # Dev Key
            - 'arn:aws:kms:us-east-1:#{AWS::AccountId}:key/f5564c81-2f17-4ecb-acb4-6eddeae2a7a2'
            # Prod Key
            - 'arn:aws:kms:us-west-2:#{AWS::AccountId}:key/5b241634-2261-420b-b1db-595b72574583'

    environment:
      region: ${self:custom.region}
      stage: ${self:custom.stage}
      users_table_name: ${self:custom.usersTableName}
      users_tally_table_name: ${self:custom.usersTallyTableName}
      biebered_sns_arn: ${self:custom.snsBieberedArn}
      stats_sns_arn: ${self:custom.snsStatsArn}


functions:
  initial_response:
    handler: wsgi.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'
    iamRoleStatementsName: initial_response_role
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sns:Publish
        Resource:
          - ${self:custom.snsBieberedArn}
          - ${self:custom.snsStatsArn}
  response_followup:
    handler: bieber_followup.lambda_func
    environment:
      biebered_slack_chanel: ''
    events:
      - sns: arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.snsBieberedName}
  get_stats:
    handler: bieber_stats.lambda_func
    events:
      - sns: arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.snsStatsName}
    iamRoleStatementsName: get_stats_role
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
        Resource:
          - ${self:custom.dbUsersTallyArn}
  update_db:
    handler: update_db.lambda_func
    events:
      - sns: arn:aws:sns:${self:custom.region}:#{AWS::AccountId}:${self:custom.snsBieberedName}
    iamRoleStatementsName: update_db_role
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
        Resource:
          - ${self:custom.dbUsersArn}
          - ${self:custom.dbUsersTallyArn}
  tally_db:
    handler: tally_db.lambda_func
    events:
      - stream:
          type: dynamodb
          arn: ${self:custom.dbUsersStreamArn}
    iamRoleStatementsName: tally_db_role
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:DescribeStream
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:ListStreams
        Resource:
          - ${self:custom.dbUsersTallyArn}
          - ${self:custom.dbUsersArn}


plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-iam-roles-per-function
  - serverless-plugin-dynamodb-autoscaling
  - serverless-pseudo-parameters


custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  usersTableName: 'UsersTable-${self:custom.stage}'
  usersTallyTableName: 'UsersTallyTable-${self:custom.stage}'
  snsBieberedName: 'Biebered-${self:custom.stage}'
  snsStatsName: 'Stats-${self:custom.stage}'


  snsBieberedArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ":"
        - Ref: AWS::AccountId
        - ":"
        - Fn::GetAtt:
          - SNSUsersQueue
          - TopicName
  snsStatsArn:
    Fn::Join:
      - ''
      - - 'arn:aws:sns:'
        - Ref: AWS::Region
        - ":"
        - Ref: AWS::AccountId
        - ":"
        - Fn::GetAtt:
          - SNSStatsQueue
          - TopicName

  dbUsersArn: { 'Fn::GetAtt': ['DynamoDBUsersTable', 'Arn' ] }
  dbUsersStreamArn: { 'Fn::GetAtt': ['DynamoDBUsersTable', 'StreamArn' ] }
  dbUsersTallyArn: { 'Fn::GetAtt': ['DynamoDBUsersTallyTable', 'Arn' ] }

  wsgi:
    app: bieber.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  serverless-iam-roles-per-function:
    defaultInherit: true


resources:
    Resources:
      DynamoDBUsersTable:
        Type: 'AWS::DynamoDB::Table'
        Properties:
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 10
            WriteCapacityUnits: 10
          TableName: ${self:custom.usersTableName}
          StreamSpecification:
            StreamViewType: NEW_IMAGE
      DynamoDBUsersTallyTable:
        Type: 'AWS::DynamoDB::Table'
        Properties:
          AttributeDefinitions:
            -
              AttributeName: user_id
              AttributeType: S
          KeySchema:
            -
              AttributeName: user_id
              KeyType: HASH
          ProvisionedThroughput:
            ReadCapacityUnits: 10
            WriteCapacityUnits: 10
          TableName: ${self:custom.usersTallyTableName}
      SNSUsersQueue:
        Type: AWS::SNS::Topic
        Properties:
          DisplayName: "SNS Topic to receive and send initial SNS messages"
          TopicName: ${self:custom.snsBieberedName}
      SNSStatsQueue:
        Type: AWS::SNS::Topic
        Properties:
          DisplayName: "SNS Topic to receive and send status SNS messages"
          TopicName: ${self:custom.snsStatsName}


package:
  exclude:
    - node_modules/**
